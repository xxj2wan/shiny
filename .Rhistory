})
output$stats <- renderPrint({
BPtestdata_summary(input$type,input$radi)
})
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
}
#input() functions, output() functions
######################################
shinyApp(ui=ui, server=server)
rm(list=ls())
library(shiny)
library(ggplot2)
library(dplyr)
testData <- read.table(file="/home/jiwan/works/marine_data/trans_wq",sep="\t"
,header=TRUE)
colname <- as.factor(colnames(testData)[-1:-2])
ui <- fluidPage(
fluidRow(
column(3,wellPanel(selectInput(inputId = "type",
label= strong("Water Quality"),
choice=unique(colname)
)
)
),
column(7,plotOutput("box"),
radioButtons(inputId = "radi"
,label = "Select Site"
,choices = unique(testData$Group)
,inline = TRUE
),
verbatimTextOutput("stats"),
actionButton(inputId = "clicks", label= "clikc me")
)
)
)
#####################################
BPtestdata <- function(test){
BPtest1 <- select(testData, Group, test)
var_object <- BPtest1[,2]
var_group <- BPtest1[,1]
plot(x = var_group,y = var_object, main = test)
}
BPtestdata_summary <-function(test, groups){
BPtest1 <- select(testData, Group, test)
BPtest2 <- filter(BPtest1, Group == groups)
summary(BPtest2)
ss <- summary(BPtest2)
ss[,2]
#return(summary(BPtest2))
}
######################################
server <- function(input,output){
output$box <- renderPlot({
BPtestdata(input$type)
})
output$stats <- renderPrint({
BPtestdata_summary(input$type,input$radi)
})
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
}
#input() functions, output() functions
######################################
shinyApp(ui=ui, server=server)
rm(list=ls())
library(shiny)
library(ggplot2)
library(dplyr)
testData <- read.table(file="/home/jiwan/works/marine_data/trans_wq",sep="\t"
,header=TRUE)
colname <- as.factor(colnames(testData)[-1:-2])
ui <- fluidPage(
fluidRow(
column(3,wellPanel(
selectInput(inputId = "type",
label= strong("Water Quality"),
choice=unique(colname)),
radioButtons(inputId = "radi"
,label = "Select Site"
,choices = unique(testData$Group)
,inline = TRUE
)
)
),
column(7,plotOutput("box"),
verbatimTextOutput("stats"),
actionButton(inputId = "clicks", label= "clikc me")
)
)
)
#####################################
BPtestdata <- function(test){
BPtest1 <- select(testData, Group, test)
var_object <- BPtest1[,2]
var_group <- BPtest1[,1]
plot(x = var_group,y = var_object, main = test)
}
BPtestdata_summary <-function(test, groups){
BPtest1 <- select(testData, Group, test)
BPtest2 <- filter(BPtest1, Group == groups)
summary(BPtest2)
ss <- summary(BPtest2)
ss[,2]
#return(summary(BPtest2))
}
######################################
server <- function(input,output){
output$box <- renderPlot({
BPtestdata(input$type)
})
output$stats <- renderPrint({
BPtestdata_summary(input$type,input$radi)
})
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
}
#input() functions, output() functions
######################################
shinyApp(ui=ui, server=server)
library(shinydashboard)
install.packages(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input,output){}
shinyApp(ui=ui,server=server)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader("hi"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input,output){}
shinyApp(ui=ui,server=server)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader("hi"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input,output){}
shinyApp(ui=ui,server=server)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader("hi"),
dashboardSidebar("siderbar"),
dashboardBody("contents")
)
server <- function(input,output){}
shinyApp(ui=ui,server=server)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader("hi"),
dashboardSidebar("siderbar"),
dashboardBody(print("contents"))
)
server <- function(input,output){}
shinyApp(ui=ui,server=server)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
titlePanel("hello shiny"),
dashboardHeader("hi"),
dashboardSidebar("siderbar"),
dashboardBody()
)
server <- function(input,output){}
shinyApp(ui=ui,server=server)
rm(list=ls())
library(shiny)
library(ggplot2)
library(dplyr)
testData <- read.table(file="/home/jiwan/works/marine_data/trans_wq",sep="\t"
,header=TRUE)
colname <- as.factor(colnames(testData)[-1:-2])
ui <- fluidPage(
titlePanel("Analysis"),
fluidRow(
column(3,wellPanel(
selectInput(inputId = "type",
label= strong("Water Quality"),
choice=unique(colname)),
radioButtons(inputId = "radi"
,label = "Select Site"
,choices = unique(testData$Group)
,inline = TRUE
)
)
),
column(7,plotOutput("box"),
verbatimTextOutput("stats"),
actionButton(inputId = "clicks", label= "clikc me")
)
)
)
#####################################
BPtestdata <- function(test){
BPtest1 <- select(testData, Group, test)
var_object <- BPtest1[,2]
var_group <- BPtest1[,1]
plot(x = var_group,y = var_object, main = test)
}
BPtestdata_summary <-function(test, groups){
BPtest1 <- select(testData, Group, test)
BPtest2 <- filter(BPtest1, Group == groups)
summary(BPtest2)
ss <- summary(BPtest2)
ss[,2]
#return(summary(BPtest2))
}
######################################
server <- function(input,output){
output$box <- renderPlot({
BPtestdata(input$type)
})
output$stats <- renderPrint({
BPtestdata_summary(input$type,input$radi)
})
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
}
#input() functions, output() functions
######################################
shinyApp(ui=ui, server=server)
rm(list=ls())
library(shiny)
library(ggplot2)
library(dplyr)
testData <- read.table(file="/home/jiwan/works/marine_data/trans_wq",sep="\t"
,header=TRUE)
colname <- as.factor(colnames(testData)[-1:-2])
ui <- fluidPage(
titlePanel("Analysis"),
siderLayout(
sidebarPanel(
selectInput(inputId = "type",
label= strong("Water Quality"),
choice=unique(colname)),
radioButtons(inputId = "radi"
,label = "Select Site"
,choices = unique(testData$Group)
,inline = TRUE
)
),
mainPanel(
plotOutput("box"),
verbatimTextOutput("stats"),
actionButton(inputId = "clicks", label= "clikc me")
)
)
)
#####################################
BPtestdata <- function(test){
BPtest1 <- select(testData, Group, test)
var_object <- BPtest1[,2]
var_group <- BPtest1[,1]
plot(x = var_group,y = var_object, main = test)
}
BPtestdata_summary <-function(test, groups){
BPtest1 <- select(testData, Group, test)
BPtest2 <- filter(BPtest1, Group == groups)
summary(BPtest2)
ss <- summary(BPtest2)
ss[,2]
#return(summary(BPtest2))
}
######################################
server <- function(input,output){
output$box <- renderPlot({
BPtestdata(input$type)
})
output$stats <- renderPrint({
BPtestdata_summary(input$type,input$radi)
})
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
}
#input() functions, output() functions
######################################
shinyApp(ui=ui, server=server)
rm(list=ls())
library(shiny)
library(ggplot2)
library(dplyr)
testData <- read.table(file="/home/jiwan/works/marine_data/trans_wq",sep="\t"
,header=TRUE)
colname <- as.factor(colnames(testData)[-1:-2])
ui <- fluidPage(
titlePanel("Analysis"),
siderbarLayout(
sidebarPanel(
selectInput(inputId = "type",
label= strong("Water Quality"),
choice=unique(colname)),
radioButtons(inputId = "radi"
,label = "Select Site"
,choices = unique(testData$Group)
,inline = TRUE
)
),
mainPanel(
plotOutput("box"),
verbatimTextOutput("stats"),
actionButton(inputId = "clicks", label= "clikc me")
)
)
)
#####################################
BPtestdata <- function(test){
BPtest1 <- select(testData, Group, test)
var_object <- BPtest1[,2]
var_group <- BPtest1[,1]
plot(x = var_group,y = var_object, main = test)
}
BPtestdata_summary <-function(test, groups){
BPtest1 <- select(testData, Group, test)
BPtest2 <- filter(BPtest1, Group == groups)
summary(BPtest2)
ss <- summary(BPtest2)
ss[,2]
#return(summary(BPtest2))
}
######################################
server <- function(input,output){
output$box <- renderPlot({
BPtestdata(input$type)
})
output$stats <- renderPrint({
BPtestdata_summary(input$type,input$radi)
})
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
}
#input() functions, output() functions
######################################
shinyApp(ui=ui, server=server)
rm(list=ls())
library(shiny)
library(ggplot2)
library(dplyr)
testData <- read.table(file="/home/jiwan/works/marine_data/trans_wq",sep="\t"
,header=TRUE)
colname <- as.factor(colnames(testData)[-1:-2])
ui <- fluidPage(
titlePanel("Analysis"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "type",
label= strong("Water Quality"),
choice=unique(colname)),
radioButtons(inputId = "radi"
,label = "Select Site"
,choices = unique(testData$Group)
,inline = TRUE
)
),
mainPanel(
plotOutput("box"),
verbatimTextOutput("stats"),
actionButton(inputId = "clicks", label= "clikc me")
)
)
)
#####################################
BPtestdata <- function(test){
BPtest1 <- select(testData, Group, test)
var_object <- BPtest1[,2]
var_group <- BPtest1[,1]
plot(x = var_group,y = var_object, main = test)
}
BPtestdata_summary <-function(test, groups){
BPtest1 <- select(testData, Group, test)
BPtest2 <- filter(BPtest1, Group == groups)
summary(BPtest2)
ss <- summary(BPtest2)
ss[,2]
#return(summary(BPtest2))
}
######################################
server <- function(input,output){
output$box <- renderPlot({
BPtestdata(input$type)
})
output$stats <- renderPrint({
BPtestdata_summary(input$type,input$radi)
})
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
}
#input() functions, output() functions
######################################
shinyApp(ui=ui, server=server)
rm(list=ls())
library(shiny)
library(ggplot2)
library(dplyr)
testData <- read.table(file="/home/jiwan/works/marine_data/trans_wq",sep="\t"
,header=TRUE)
colname <- as.factor(colnames(testData)[-1:-2])
ui <- fluidPage(
titlePanel("Analysis"),
sidebarLayout(position = "left",
sidebarPanel(
selectInput(inputId = "type",
label= strong("Water Quality"),
choice=unique(colname)),
radioButtons(inputId = "radi"
,label = "Select Site"
,choices = unique(testData$Group)
,inline = TRUE
)
),
mainPanel(
plotOutput("box"),
verbatimTextOutput("stats"),
actionButton(inputId = "clicks", label= "clikc me")
)
)
)
#####################################
BPtestdata <- function(test){
BPtest1 <- select(testData, Group, test)
var_object <- BPtest1[,2]
var_group <- BPtest1[,1]
plot(x = var_group,y = var_object, main = test)
}
BPtestdata_summary <-function(test, groups){
BPtest1 <- select(testData, Group, test)
BPtest2 <- filter(BPtest1, Group == groups)
summary(BPtest2)
ss <- summary(BPtest2)
ss[,2]
#return(summary(BPtest2))
}
######################################
server <- function(input,output){
output$box <- renderPlot({
BPtestdata(input$type)
})
output$stats <- renderPrint({
BPtestdata_summary(input$type,input$radi)
})
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
}
#input() functions, output() functions
######################################
shinyApp(ui=ui, server=server)
runApp('works/test3_shiny.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='mbljiwan', token='D67F1D6B1CB77B441F7EA705DB886493', secret='YdC7SJT3uKtA2EoNZtuM5hKjY9g0SVMUnEmQ2oAh')
library(rsconnect)
rsconnect::setAccountInfo(name='mbljiwan', token='D67F1D6B1CB77B441F7EA705DB886493', secret='YdC7SJT3uKtA2EoNZtuM5hKjY9g0SVMUnEmQ2oAh')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages("openssl")
install.packages("Rcurl")
install.packages("RCurl")
install.packages("openssl")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='mbljiwan', token='D67F1D6B1CB77B441F7EA705DB886493', secret='YdC7SJT3uKtA2EoNZtuM5hKjY9g0SVMUnEmQ2oAh')
rm(list=ls())
testData <- read.table(file="/home/jiwan/works/marine_data/trans_wq",sep="\t"
,header=TRUE)
runApp('works/shiny')
getwd()
setwd("/home/jiwan/works/shiny/")
library(rsconnect)
deployApp()
deployApp()
deployApp()
library(rsconnect)
rsconnect::deployApp('/home/jiwan/works/shiny/')
deployApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
